
VERSION = 0.1


class ajpPathBuilder():
    def __init__(self) -> None:
        self.paths = []
        self.build_header()
        self.build_end()
        self.wait_time = 100
 
    def set_waittime(self, time):
        self.wait_time = time

    def build_header(self):
        ''''''
        self.header = []
        self.header.append("#0\n")
        self.header.append("! **********************************\n")
        self.header.append(f"! Generated by: AJP Path Builder v{VERSION}\n")
        self.header.append("! Axes: XYZTR=XY---\n")
        self.header.append("! Resolution: 1,1,-,-,-\n")
        self.header.append("! some file path\n")
        self.header.append("! **********************************\n\n")

        self.header.append("! Alignment Structure:\n")
        self.header.append("If (gIntFindFids = 1)\n")
        self.header.append("     gDblFidX(1) = 0\n")
        self.header.append("     gDblFidY(1) = 0\n")
        self.header.append("     gDblFidX(2) = 0\n")
        self.header.append("     gDblFidY(2) = 0\n")
        self.header.append("     Stop\n")
        self.header.append("End\n\n")

        self.header.append("Loop 1\n")

    def build_end(self):
        self.end=[]
        self.end.append("\n")
        self.end.append("END\n")
        self.end.append("STOP\n")

    def buildfile(self, dest):
        with open(dest, 'w') as f:
            f.writelines(self.header)
            for path in self.paths:
                f.writelines(self.path2str(path))
            f.writelines(self.end)

    def path2str(self, path):
        start, end = path
        sx, sy = start
        ex, ey = end
        outstr = []
        if start == end:
            outstr.append(f"ptp/ev XY,{sx:.4f},{sy:.4f},gDblRapidSpeed\n")
            outstr.append(
                "Start gIntSubBuffer,ShutterOpen;TILL PST(gIntSubBuffer).#RUN = 0\n")
            outstr.append(f"wait {self.wait_time}\n")
            outstr.append("till (^X_AST.#MOVE) & (^Y_AST.#MOVE)\n")
            outstr.append(
                "Start gIntSubBuffer,ShutterClose;TILL PST(gIntSubBuffer).#RUN = 0\n\n")

        else:
            outstr.append(f"ptp/ev XY,{sx:.4f},{sy:.4f},gDblRapidSpeed\n")
            outstr.append(
                "Start gIntSubBuffer,ShutterOpen;TILL PST(gIntSubBuffer).#RUN = 0\n")
            outstr.append("wait 5\n")
            outstr.append(f"MSEG XY,{sx:.4f},{sy:.4f}\n")
            outstr.append(f"line XY,{ex:.4f},{ey:.4f}\n")
            outstr.append("ENDS XY\n")
            outstr.append("till (^X_AST.#MOVE) & (^Y_AST.#MOVE)\n")
            outstr.append(
                "Start gIntSubBuffer,ShutterClose;TILL PST(gIntSubBuffer).#RUN = 0\n\n")
        return outstr

    def addpath(self, start, end):
        self.paths.append((start, end))
